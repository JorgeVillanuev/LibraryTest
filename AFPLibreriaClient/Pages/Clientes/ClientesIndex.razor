@page "/libros"


@inject HttpClient http

<div class="col-8">
    <EditForm Model="libro" OnValidSubmit="OnClick">
        <DataAnnotationsValidator />
        <div class="form-row">
            <div class="col-4">
                <div class="form-group">
                    <label for="tit">Titulo</label>
                    <input type="text" class="form-control" id="tit" @bind-value="libro.Titulo" />
                    <ValidationMessage For="() => libro.Titulo" />
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    <label for="desc">Descripción</label>
                    <input type="text" class="form-control" id="desc" @bind-value="libro.Descripcion" />
                    <ValidationMessage For="() => libro.Descripcion" />
                </div>
            </div>
            <div class="col-4">
                <label for="desc">Fecha de publicación</label>
                <div class="form-group">
                    <RadzenDatePicker Placeholder="fecha" @bind-Value=@libro.FechaPublicacion DateFormat="d" />
                    <ValidationMessage For="() => libro.FechaPublicacion" />
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-4">
                <div class="form-group">
                    <label for="stock">Stock</label>
                    <input type="number" class="form-control" min="0" id="stock" @bind-value="libro.Stock" />
                    <ValidationMessage For="() => libro.Stock" />
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    <label for="cat">Categoria</label>

                    <RadzenDropDown Placeholder="Categoria"
                                    Style="width:100%; background-color:transparent;"
                                    @bind-Value="@libro.CategoriaId" AllowClear="true" TValue="int"
                                    LoadData=@((Radzen.LoadDataArgs args) => LoadData(args,"cat")) AllowFiltering="true"
                                    Data=@ListCategorias TextProperty="Categoria1" ValueProperty="Id" />

                    <ValidationMessage For="() => libro.CategoriaId" />
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    <label for="aut">Autor</label>
                    <RadzenDropDown Placeholder="Categoria"
                                    Style="width:100%; background-color:transparent;"
                                    @bind-Value="@libro.AutorId" AllowClear="true" TValue="int"
                                    LoadData=@((Radzen.LoadDataArgs args) => LoadData(args,"aut")) AllowFiltering="true"
                                    Data=@ListAutores TextProperty="Nombre" ValueProperty="Id" />
                    <ValidationMessage For="() => libro.AutorId" />
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="col-xs-12 col-sm-12 col-md-6 col-lg-6 col-xl-6">
                <div class="form-group">
                    <label for="img">Imagen</label>
                    <InputFile multiple OnChange="OnChange" id="img" class="form-control" />
                    <ValidationMessage For="()=>libro.Imagen" />
                </div>
                <div class="form-group">
                    @if (libro.Imagen != null)
                    {
                        imageUrl = libro.Imagen;
                    }
                    <div class="d-flex justify-content-start">
                        <img class="rounded" src="@imageUrl" alt="Imagen" />
                    </div>
                </div>
            </div>
        </div>
        <input type="submit"class="btn btn-primary" name="name" value="Guardar" />
    </EditForm>

    <hr />

    <div class="table-responsive">
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@ListLibros" TItem="Libro" ColumnWidth="300px" LogicalFilterOperator="Radzen.LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="Libro" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="Radzen.TextAlign.Center" />
                <RadzenDataGridColumn TItem="Libro" Title="Imagen" Sortable="false" Filterable="false" Width="200px">
                    <Template Context="data">
                        <RadzenImage Path="@data.Imagen" style="width: 40px; height: 40px; border-radius: 8px;" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Libro" Property="Titulo" Title="Titulo" />
                <RadzenDataGridColumn TItem="Libro" Property="Descripcion" Title="Descripcion" Width="150px" />                
                <RadzenDataGridColumn TItem="Libro" Title="Fecha de publicacion" Sortable="false" Filterable="false" Width="200px">
                    <Template Context="data">
                        <span>@data.FechaModificacion.ToString("dd-MM-yyyy")</span>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Libro" Property="Stock" Title="Stock" />
            </Columns>
        </RadzenDataGrid>
    </div>
</div>
@code {
    public string imageUrl;

    public Libro libro { get; set; } = new Libro();

    public List<Categoria> ListCategorias { get; set; } = new List<Categoria>();
    public List<Autore> ListAutores { get; set; } = new List<Autore>();

    List<Libro> ListLibros = new List<Libro>();
    private string api = "https://localhost:44340/api/";

    protected async override Task OnInitializedAsync()
    {
        await ObtenerLibros();
        await ObtenrAutores();
        await ObtenrCategorias();
    }

    private async Task ObtenerLibros()
    {
        ListLibros = await http.GetFromJsonAsync<List<Libro>>($"{api}Libros");
    }
    private async Task<List<Categoria>> ObtenrCategorias()
    {
        ListCategorias = await http.GetFromJsonAsync<List<Categoria>>($"{api}categorias");

        return ListCategorias;
    }
    private async Task<List<Autore>> ObtenrAutores()
    {
        ListAutores = await http.GetFromJsonAsync<List<Autore>>($"{api}autores");

        return ListAutores;
    }

    private async Task LoadData(LoadDataArgs args, string opcion)
    {
        switch (opcion)
        {
            case "cat":
                var query = await ObtenrCategorias();

                if (!string.IsNullOrEmpty(args.Filter))
                {
                    query = query.Where(c => c.Categoria1.ToLower().Contains(args.Filter.ToLower())).ToList();
                }
                ListCategorias = query;
                break;
            case "aut":
                var query1 = await ObtenrAutores();

                if (!string.IsNullOrEmpty(args.Filter))
                {
                    query1 = query1.Where(c => c.Nombre.ToLower().Contains(args.Filter.ToLower())).ToList();
                }
                ListAutores = query1;
                break;
        }
        await InvokeAsync(StateHasChanged);
    }

    private string format = "image/png";
    private IBrowserFile imagen;
    private async Task OnChange(InputFileChangeEventArgs e)
    {
        imagen = e.GetMultipleFiles().FirstOrDefault();
        var buffer = new byte[imagen.Size];
        await imagen.OpenReadStream().ReadAsync(buffer);
        imageUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        this.StateHasChanged();
    }

    private async Task OnClick()
    {
        libro.Imagen = imageUrl;
        await http.PostAsJsonAsync($"{api}Libros", libro);
        libro = new Libro();
        imageUrl = null;
        await ObtenerLibros();
        this.StateHasChanged();

    }
}